#include <SPI.h>
#include <EEPROM.h>

#include <avr/pgmspace.h>

#include <Arduboy.h>

Arduboy arduboy;

// frame counter, 2-byte unsigned int, max 65536
unsigned int _microcanvas_frame_counter = 0;

// sprintf() textbuffer for drawText
char _microcanvas_textbuffer[32];


// global state machine
unsigned int _microcanvas_state;

PROGMEM const unsigned char gfx_clouduboy[] = {
  /*96x17*/ 0x00, 0xf0, 0x0c, 0x02, 0xf2, 0x09, 0x05, 0x05, 0x09, 0x11, 0xa2, 0xa4, 0x98, 0x00, 0xfe, 0x01, 0x01, 0xfe, 0x80, 0x60, 0x10, 0x88, 0x48, 0x28, 0x48, 0x88, 0x10, 0x20, 0xc0, 0xf0, 0x08, 0x08, 0xf0, 0x00, 0x00, 0xf0, 0x08, 0x08, 0xf0, 0x00, 0xe0, 0x10, 0x08, 0x88, 0x48, 0x48, 0xde, 0x01, 0x01, 0xfe, 0x00, 0xf0, 0x08, 0x08, 0xf0, 0x00, 0x00, 0xf0, 0x08, 0x08, 0xf0, 0x00, 0xfe, 0x01, 0x01, 0x9e, 0x48, 0x28, 0xc8, 0x08, 0x10, 0xe0, 0x80, 0x60, 0x10, 0x88, 0x48, 0x28, 0x48, 0x88, 0x10, 0x20, 0xc0, 0x70, 0x88, 0x08, 0x70, 0x80, 0xc0, 0x30, 0x08, 0x88, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x10, 0x11, 0x22, 0x24, 0x24, 0x24, 0x13, 0x10, 0x08, 0x07, 0x00, 0x1f, 0x20, 0x20, 0x1f, 0x03, 0x0c, 0x10, 0x23, 0x24, 0x28, 0x24, 0x23, 0x10, 0x08, 0x07, 0x0f, 0x10, 0x20, 0x23, 0x24, 0x24, 0x17, 0x20, 0x20, 0x3f, 0x00, 0x0f, 0x10, 0x20, 0x23, 0x24, 0x24, 0x17, 0x20, 0x20, 0x3f, 0x00, 0x0f, 0x10, 0x20, 0x23, 0x24, 0x24, 0x17, 0x20, 0x20, 0x3f, 0x00, 0x1f, 0x20, 0x20, 0x13, 0x24, 0x24, 0x23, 0x20, 0x10, 0x0f, 0x03, 0x0c, 0x10, 0x23, 0x24, 0x28, 0x24, 0x23, 0x10, 0x4c, 0xa3, 0xa0, 0x9f, 0x80, 0x80, 0x43, 0x20, 0x18, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
PROGMEM const unsigned char gfx_logo[] = {
  /*64x64*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x60, 0x20, 0x30, 0x90, 0x10, 0x58, 0x88, 0x08, 0xe8, 0x88, 0x08, 0x88, 0xe8, 0x88, 0x08, 0x08, 0x88, 0xc8, 0x68, 0x08, 0x88, 0x48, 0x98, 0x10, 0x10, 0x30, 0x20, 0x60, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0xc6, 0xf3, 0xf1, 0x69, 0x1c, 0xa4, 0x5a, 0x41, 0x2f, 0x24, 0x11, 0x12, 0x0b, 0x09, 0x08, 0x05, 0xc5, 0xf1, 0xfc, 0xf9, 0xe0, 0x04, 0x84, 0xc5, 0xe4, 0xf5, 0xf7, 0xea, 0x89, 0x14, 0x17, 0x2f, 0x46, 0x52, 0xb8, 0x3c, 0x31, 0xd9, 0x63, 0x86, 0x0c, 0x18, 0x30, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x70, 0x1c, 0x87, 0x81, 0x84, 0x1c, 0x1e, 0x8c, 0x60, 0x11, 0x08, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0xf8, 0xfa, 0x06, 0xfd, 0xfd, 0xfd, 0x06, 0xfa, 0x38, 0x3a, 0xfa, 0xf0, 0xe0, 0x00, 0xc1, 0xe5, 0xf6, 0x76, 0x74, 0xe0, 0xe0, 0xc1, 0x06, 0x09, 0x11, 0xe4, 0x0e, 0x37, 0xd0, 0x48, 0x61, 0x07, 0x1c, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07, 0x00, 0xe0, 0xf3, 0xe3, 0x03, 0x01, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc4, 0xce, 0x7e, 0x1e, 0x41, 0x00, 0xff, 0xff, 0xff, 0x00, 0x07, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x03, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x0b, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x62, 0xc3, 0x63, 0x60, 0xc0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0xe0, 0x10, 0x70, 0xe0, 0x80, 0x80, 0xe0, 0xe4, 0xec, 0x1d, 0x03, 0x00, 0x01, 0x00, 0x18, 0x37, 0x2f, 0x6f, 0x60, 0x20, 0x20, 0x10, 0x10, 0x11, 0x23, 0x40, 0x80, 0x00, 0x00, 0x02, 0x06, 0x10, 0xe1, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0x00, 0xc0, 0x2a, 0x7a, 0x26, 0x04, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1c, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x30, 0x47, 0x88, 0xb0, 0x40, 0x81, 0x19, 0x18, 0x38, 0x3b, 0x76, 0xf4, 0xe8, 0xe8, 0xea, 0xe0, 0xf4, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x18, 0x0c, 0x0c, 0x04, 0x02, 0x01, 0x10, 0x00, 0x28, 0x80, 0x60, 0x10, 0x3b, 0x90, 0x78, 0x18, 0x07, 0x00, 0x0c, 0x0d, 0x19, 0x11, 0xc3, 0x70, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1e, 0x00, 0x70, 0x90, 0x10, 0x10, 0x10, 0x00, 0xfe, 0x01, 0x01, 0x81, 0x7d, 0x01, 0x79, 0x25, 0x79, 0x01, 0x7d, 0x11, 0x6d, 0x01, 0x79, 0x25, 0x79, 0x01, 0x79, 0x25, 0x58, 0x04, 0x7c, 0x04, 0x7a, 0x26, 0x79, 0x01, 0x01, 0x01, 0xfe, 0x01, 0x10, 0x10, 0x10, 0x90, 0x70, 0x00, 0x18, 0x0e, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x27, 0x20, 0x20, 0x20, 0x20, 0x27, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x18, 0x04, 0x14, 0x15, 0x25, 0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x15, 0x14, 0x04, 0x18, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x20, 0x20, 0x20, 0x20, 0x27, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
PROGMEM const unsigned char gfx_clouds[] = {
  /*20x16*/ 0x1c, 0x22, 0x22, 0x22, 0x24, 0x10, 0x12, 0x2a, 0x21, 0x41, 0x41, 0x41, 0x42, 0x4a, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
PROGMEM const unsigned char gfx_cactus[] = {
  /*16x24x2*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xfe, 0x00, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x83, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xcf, 0x9e, 0xf0, 0xf8, 0xfc, 0xfc, 0xb8, 0x80, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0d, 0x8b, 0xbf, 0xff, 0xff, 0xbf, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
PROGMEM const unsigned char gfx_dino[] = {
  /*32x32x7*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x78, 0xf8, 0x70, 0xb0, 0xfc, 0xde, 0xce, 0x8c, 0x08, 0xc8, 0xf0, 0xf0, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x67, 0xef, 0xfb, 0x80, 0x87, 0x8f, 0x0f, 0x0c, 0x07, 0x01, 0x01, 0x89, 0x8d, 0x81, 0x80, 0x41, 0x42, 0x3a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0xe0, 0xf0, 0xd0, 0x4e, 0x8e, 0x43, 0x21, 0xb1, 0x10, 0x89, 0x0c, 0x00, 0x00, 0xf8, 0x04, 0x02, 0x02, 0x02, 0x03, 0xfc, 0x44, 0x88, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x3a, 0x77, 0x60, 0x60, 0x21, 0x23, 0x1e, 0x0e, 0x19, 0x20, 0x48, 0x64, 0x62, 0x3f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x78, 0xf8, 0x78, 0xb0, 0xf8, 0xdc, 0xce, 0x8e, 0x0c, 0xc8, 0xf0, 0xf0, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x67, 0xef, 0xfb, 0x80, 0x87, 0x8f, 0x0f, 0x0c, 0x07, 0x01, 0x01, 0x89, 0x8d, 0x81, 0x80, 0x41, 0x42, 0x3a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xc0, 0x80, 0x50, 0x74, 0x7e, 0x1e, 0x23, 0x41, 0x80, 0xd9, 0x68, 0x20, 0x00, 0xc0, 0x34, 0x0a, 0x02, 0x07, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x06, 0x08, 0x30, 0x30, 0x62, 0x66, 0x66, 0x28, 0x58, 0x69, 0x76, 0x2a, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x78, 0xf8, 0x70, 0xb0, 0xfc, 0xde, 0xce, 0x8c, 0x08, 0xc8, 0xf0, 0xf0, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x67, 0xef, 0xfb, 0x80, 0x87, 0x8f, 0x0f, 0x0c, 0x07, 0x01, 0x01, 0x89, 0x8d, 0x81, 0x80, 0x41, 0x42, 0x3a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x80, 0xc0, 0xd0, 0x7c, 0x58, 0x06, 0x35, 0x23, 0x40, 0x81, 0x80, 0xcc, 0xc8, 0x50, 0x70, 0x30, 0x00, 0xfe, 0x21, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x03, 0x02, 0x02, 0x04, 0x04, 0x04, 0x12, 0x7b, 0x60, 0x64, 0x24, 0x2c, 0x38, 0x10, 0x30, 0x20, 0x62, 0x63, 0x34, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x78, 0xf8, 0x78, 0xb0, 0xf8, 0xdc, 0xce, 0x8e, 0x0c, 0xc8, 0xf0, 0xf0, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x67, 0xef, 0xfb, 0x80, 0x87, 0x8f, 0x0f, 0x0c, 0x07, 0x01, 0x01, 0x89, 0x8d, 0x81, 0x80, 0x41, 0x42, 0x3a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xc0, 0x80, 0x50, 0x74, 0x7e, 0x1e, 0x23, 0x41, 0x80, 0xd9, 0x68, 0x20, 0x00, 0xc0, 0x34, 0x0a, 0x02, 0x07, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x06, 0x08, 0x30, 0x30, 0x62, 0x66, 0x66, 0x28, 0x58, 0x69, 0x76, 0x2a, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x78, 0xf8, 0x70, 0xb0, 0xfc, 0xde, 0xce, 0x8c, 0x08, 0xc8, 0xb0, 0x70, 0xa0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x67, 0xef, 0xfb, 0x80, 0x87, 0x8a, 0x0d, 0xca, 0xa7, 0x60, 0x21, 0x48, 0x99, 0x80, 0x81, 0x01, 0x42, 0x7a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0xe0, 0xf0, 0xd0, 0x4e, 0x8e, 0x43, 0x21, 0xb1, 0x10, 0x89, 0x0c, 0x00, 0x00, 0xf8, 0x04, 0x02, 0x02, 0x02, 0x03, 0xfc, 0x44, 0x88, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x3a, 0x77, 0x60, 0x60, 0x21, 0x23, 0x1e, 0x0e, 0x19, 0x20, 0x48, 0x64, 0x62, 0x3f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x10, 0x08, 0xf8, 0xd8, 0x7c, 0x2c, 0x3c, 0x14, 0x94, 0x84, 0x0c, 0xe8, 0xe0, 0xc0, 0x80, 0xd0, 0xf0, 0x60, 0x98, 0xdc, 0xdc, 0xd0, 0xa0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x28, 0x40, 0x9f, 0x9f, 0x98, 0xc8, 0x1e, 0x4e, 0xe4, 0x17, 0x03, 0x31, 0x61, 0xc1, 0xc0, 0x23, 0x00, 0x00, 0xa0, 0x0f, 0x8a, 0x0d, 0x0a, 0x8f, 0x82, 0x03, 0x02, 0x06, 0x01, 0x03, 0xfc, 0x00, 0x00, 0x02, 0x06, 0x0f, 0x09, 0x08, 0x08, 0x0f, 0x0f, 0x0c, 0x0c, 0x04, 0x00, 0x03, 0x02, 0x02, 0x04, 0x0c, 0x0c, 0x0c, 0x07, 0x06, 0x04, 0x06, 0x06, 0x0e, 0x0e, 0x0a, 0x0e, 0x0e, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x78, 0xf8, 0x70, 0xb0, 0xfc, 0xde, 0xce, 0x8c, 0x08, 0xc8, 0xf0, 0x70, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x67, 0xef, 0xfb, 0x80, 0x87, 0x8f, 0x0c, 0xaf, 0x47, 0x81, 0xe1, 0xe9, 0xec, 0xe1, 0xe1, 0x43, 0x3e, 0x81, 0x67, 0x27, 0x1f, 0x04, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0xe0, 0xf0, 0xd0, 0x48, 0x8c, 0x42, 0x21, 0xb1, 0x10, 0x89, 0x0c, 0x00, 0x01, 0xfa, 0x06, 0x02, 0x02, 0x02, 0x04, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x3a, 0x77, 0x60, 0x60, 0x21, 0x23, 0x1e, 0x0e, 0x19, 0x20, 0x48, 0x64, 0x62, 0x3f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const byte PROGMEM sfx_bling[] = { 0x90, 71, 0,116, 0x80, 0x90, 76, 1,222, 0x80, 0xf0 };
const byte PROGMEM sfx_plop[] = { 0x90, 47, 0, 33, 0x80, 0x90, 41, 0, 50, 0x80, 0xf0 };
const byte PROGMEM sfx_boing[] = { 0x90, 57, 0, 33, 0x80, 0x90, 69, 0, 83, 0x80, 0xf0 };
const byte PROGMEM sfx_eek[] = { 0x90, 87, 0,50, 0x80, 0x90, 82, 0,33, 0x80, 0x90, 87, 0,66, 0x80, 0xf0 };
const byte PROGMEM sfx_bust[] = { 0x90, 47, 0, 50, 0x80, 0x90, 41, 0, 99, 0x80, 0xf0 };

const int DINO_EEK_FRAME = 4;
const int DINO_KAPUT_FRAME = 5;
const int DINO_HELLO_FRAME = 6;
const int DINO_SHADOW_START = 6;
const int DINO_SHADOW_SIZE = (32 - 2 * 6);
const int S_INTRO = 1;
const int S_PLAYING = 2;
const int S_GAMEOVER = 3;
const int START_SPEED = 75;
const byte GFX_CLOUDUBOY_WIDTH = 96;
const byte GFX_CLOUDUBOY_HEIGHT = 17;
const byte GFX_CLOUDUBOY_FRAMES = 0;
const int GFX_CLOUDUBOY_FRAMESIZE = 288;
const byte GFX_LOGO_WIDTH = 64;
const byte GFX_LOGO_HEIGHT = 64;
const byte GFX_LOGO_FRAMES = 0;
const int GFX_LOGO_FRAMESIZE = 512;
const byte GFX_DINO_WIDTH = 32;
const byte GFX_DINO_HEIGHT = 32;
const byte GFX_DINO_FRAMES = 7;
const byte GFX_DINO_FRAMESIZE = 128;
const byte GFX_CLOUDS_WIDTH = 20;
const byte GFX_CLOUDS_HEIGHT = 16;
const byte GFX_CLOUDS_FRAMES = 1;
const byte GFX_CLOUDS_FRAMESIZE = 40;
const byte GFX_CACTUS_WIDTH = 16;
const byte GFX_CACTUS_HEIGHT = 24;
const byte GFX_CACTUS_FRAMES = 2;
const byte GFX_CACTUS_FRAMESIZE = 48;

int baseline;
int baseline_dino;
int distance;
int obs_cactus_1;
int obs_cactus_2;
int obs_cactus_1_y;
int obs_cactus_2_y;
int obs_cactus_1_y_type;
int obs_cactus_2_y_type;
int dino_jump_frame;
int dino_jump_height = 0;
int dino_run_speed;
int calculate_next_step_remainder = 0;

void _microcanvas_yield(byte n) {
  arduboy.display();
  while(n>0) {
    while (!arduboy.nextFrame()) delay(1);
    --n;
  }
}

boolean collides(
  const unsigned char* s1, int x1,int y1, int s1_width, int s1_height,
  const unsigned char* s2, int x2,int y2, int s2_width, int s2_height,
  boolean precise
) {
  boolean result = false;

  // Basic collision rectangle
  int cx = x1>x2 ? x1 : x2;
  int cw = x1>x2 ? x2+s2_width-x1 : x1+s1_width-x2;

  int cy = y1>y2 ? y1 : y2;
  int ch = y1>y2 ? y2+s2_height-y1 : y1+s1_height-y2;

  if (cw>0 && ch>0) {
    //result = true;
    result = (cw>(s1_width+s2_width)/5 && ch>(s2_height)/2);
  }

  // No bounding rect collision or no precise check requested
  if (!precise || !result) {
    return result;
  }

  // TODO: pixel-by-pixel collision test

  return result;
}

boolean game_intro() {
////// FUNCTION BODY //////
for (int y = -8; y <= 38; y += 2) {
  arduboy.clear();
  arduboy.drawBitmap( (WIDTH / 2 - GFX_LOGO_WIDTH / 2), 0, gfx_logo, GFX_LOGO_WIDTH, GFX_LOGO_HEIGHT, WHITE );
  _microcanvas_yield(1);
}
arduboy.tunes.playScore( sfx_bling );
arduboy.setRGBled(96, 0, 128);
_microcanvas_yield(6);
arduboy.setRGBled(0, 0, 0);
_microcanvas_yield(60);
int y = 12;
arduboy.drawBitmap( (54 - 2), (y - 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
arduboy.drawBitmap( (54 - 2), (y - 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
arduboy.drawBitmap( (54 - 2), (y - 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
arduboy.drawBitmap( (54 + 1), (y + 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
arduboy.drawBitmap( (54 + 1), (y + 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
arduboy.drawBitmap( (54 + 1), (y + 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
for (int frame = 0; frame < 36; ++frame) {
  int rx = random(1,3);
  int ry = random(1,3);
  int noise = 0;
  if (frame % 3 == 0) {
  arduboy.drawBitmap( (rx + 54), (ry + y), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
  arduboy.drawBitmap( (rx + 54), (ry + y), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
  arduboy.drawBitmap( (rx + 54), (ry + y), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
} else {
  arduboy.drawBitmap( ((rx + 54) + noise), ((ry + y) + noise), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( ((rx + 54) + noise), ((ry + y) + noise), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( ((rx + 54) + noise), ((ry + y) + noise), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
}
arduboy.display();
  _microcanvas_yield(1);
}
while (y < baseline_dino) {
  y += (1 + y / 10);
  if (y > baseline_dino) y = baseline_dino;
  arduboy.clear();
  arduboy.drawBitmap( (WIDTH / 2 - GFX_LOGO_WIDTH / 2), (HEIGHT / 2 - GFX_LOGO_HEIGHT / 2), gfx_logo, GFX_LOGO_WIDTH, GFX_LOGO_HEIGHT, WHITE );
  arduboy.drawBitmap( (54 - 1), (y - 0), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( (54 + 1), (y - 0), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( (54 - 1), (y - 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( (54 + 1), (y - 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( (54 + 0), (y + 1), gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( 54, y, gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
  arduboy.display();
  _microcanvas_yield(1);
}
arduboy.tunes.playScore( sfx_plop );
_microcanvas_yield(120);
for (int i = 0; i < 64; ++i) {
  int z = (i < 54 ? i : 54);
  arduboy.drawBitmap( ((54 - z) + 1), y, gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.fillRect( 0, (i < 32 ? i * 2 : (127 - i * 2)), 128, 1, BLACK );

  arduboy.drawBitmap( (54 - z)-1, y, gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( (54 - z), y-1, gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );
  arduboy.drawBitmap( (54 - z)+1, y, gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, BLACK );

  arduboy.drawBitmap( (54 - z), y, gfx_dino+GFX_DINO_FRAMESIZE*DINO_HELLO_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
  _microcanvas_yield(1);
}
_microcanvas_yield(10);
return true;
}
int calculate_next_step(int run_speed) {
////// FUNCTION BODY //////
int next = run_speed / 60;
calculate_next_step_remainder += 100 * run_speed / 60 % 100;
while (calculate_next_step_remainder > 50) {
  next++;
  calculate_next_step_remainder -= 100;
}
return next;

}
int calculate_run_speed(int distance, int next_step) {
////// FUNCTION BODY //////
return ((START_SPEED + (distance + next_step) / 100) + (distance + next_step) / 500 * 4);

}
boolean game_play() {
////// FUNCTION BODY //////
int next_step;
game_setup();
while (true) {
  ++_microcanvas_frame_counter;

  next_step = calculate_next_step( dino_run_speed );
  if (next_step) {
  dino_run_speed = calculate_run_speed( distance, next_step );
  distance += next_step;
}
  update_terrain( distance );
  update_dino();
arduboy.clear();
  draw_terrain( distance );
  draw_dino();
  draw_u_i();
  if (check_collisions()) break;
  _microcanvas_yield(1);
}
return true;
}
boolean game_over() {
////// FUNCTION BODY //////
arduboy.tunes.playScore( sfx_eek );
for (int i = 0; i < 24; i++) {
  ++_microcanvas_frame_counter;

  arduboy.clear();
  draw_terrain( distance );
  if (i != 7 && i != 8 && i != 16 && i != 17) {
  arduboy.drawBitmap( 0, (baseline_dino - dino_jump_height), gfx_dino+GFX_DINO_FRAMESIZE*DINO_EEK_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
}
  draw_u_i();
  check_collisions();
  arduboy.display();
  _microcanvas_yield(1);
}
int falling = true;
int next_step;
int fall_distance = distance;
while (true) {
  ++_microcanvas_frame_counter;

  if (arduboy.pressed( B_BUTTON )) {
    return true;
  }

  if (dino_jump_height > -4) {
  dino_jump_height -= 1;
}
  if (falling && dino_jump_height <= -4) {
  dino_jump_height = -4;
  arduboy.tunes.playScore( sfx_bust );
  falling = false;
}
  if (dino_run_speed > 0) {
  next_step = calculate_next_step( dino_run_speed );
  dino_run_speed -= 1;
  fall_distance += next_step;
}
  update_terrain( fall_distance );
  arduboy.clear();
  draw_terrain( fall_distance );
  (baseline_dino - dino_jump_height);
  arduboy.drawBitmap( 0, (baseline_dino - dino_jump_height), gfx_dino+GFX_DINO_FRAMESIZE*DINO_KAPUT_FRAME, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
  draw_u_i();
  _microcanvas_yield(1);
}
return true;
}
void game_setup() {
////// FUNCTION BODY //////
_microcanvas_state = S_PLAYING;
distance = 0;
dino_run_speed = START_SPEED;
obs_cactus_1 = obs_cactus_2 = -WIDTH;
update_terrain( distance );
dino_jump_frame = 0;
dino_jump_height = 0;

}
void update_terrain(int distance) {
////// FUNCTION BODY //////
if ((obs_cactus_1 + GFX_CACTUS_WIDTH) < distance) {
  obs_cactus_1 = ((distance + 175) + 5 * random(0,10));
  obs_cactus_1_y = (random( (baseline + 1), HEIGHT ) - GFX_CACTUS_HEIGHT);
}
if (distance > 500) {
  if ((obs_cactus_2 + GFX_CACTUS_WIDTH) < distance) {
  obs_cactus_2 = ((distance + 200) + 6 * random( 0, 10 ));
  obs_cactus_2_y = (random( (baseline + 1), HEIGHT ) - GFX_CACTUS_HEIGHT);
}
  int obs_distance = (obs_cactus_2 - obs_cactus_1);
  if (obs_distance > 0 && obs_distance < GFX_CACTUS_WIDTH / 2) {
  obs_cactus_2 += GFX_CACTUS_WIDTH / 2;
}
  if (obs_distance < 0 && obs_distance > GFX_CACTUS_WIDTH / -2) {
  obs_cactus_1 += GFX_CACTUS_WIDTH / 2;
}
  obs_distance = (obs_cactus_2 - obs_cactus_1);
  if (obs_distance > (GFX_CACTUS_WIDTH + 5) && obs_distance < (GFX_CACTUS_WIDTH + GFX_DINO_WIDTH)) {
  obs_cactus_2 += GFX_DINO_WIDTH;
}
  if (obs_distance < -(GFX_CACTUS_WIDTH + 5) && obs_distance > -(GFX_CACTUS_WIDTH + GFX_DINO_WIDTH)) {
  obs_cactus_1 += GFX_DINO_WIDTH;
}
}

}
void update_dino() {
////// FUNCTION BODY //////
if (_microcanvas_state == S_PLAYING) {
  if (!dino_jump_frame && arduboy.pressed( A_BUTTON ) || arduboy.pressed( UP_BUTTON )) {
  dino_jump_frame = 1;
  dino_jump_height = 5;
  arduboy.tunes.playScore( sfx_boing );
} else if (dino_jump_frame) {
  ++dino_jump_frame;
  if (dino_jump_frame < 6) {
  dino_jump_height += 6;
} else if (dino_jump_frame < 9) {
  dino_jump_height += 2;
} else if (dino_jump_frame < 13) {
  dino_jump_height += 1;
} else if (dino_jump_frame == 16 || dino_jump_frame == 18) {
  dino_jump_height += 1;
} else if (dino_jump_frame == 20 || dino_jump_frame == 22) {
  dino_jump_height -= 1;
} else if (dino_jump_frame > 38) {
  dino_jump_height = 0;
  dino_jump_frame = 0;
} else if (dino_jump_frame > 32) {
  dino_jump_height -= 6;
} else if (dino_jump_frame > 29) {
  dino_jump_height -= 2;
} else if (dino_jump_frame > 25) {
  dino_jump_height -= 1;
}
}
}

}
void draw_terrain(int distance) {
////// FUNCTION BODY //////
arduboy.drawBitmap( (WIDTH - distance % (WIDTH + GFX_CLOUDS_WIDTH)), 5, gfx_clouds + GFX_CLOUDS_FRAMESIZE*(0), GFX_CLOUDS_WIDTH, GFX_CLOUDS_HEIGHT, WHITE );
if (dino_jump_height > 4) {
  arduboy.fillRect( 0, baseline, WIDTH, 1, WHITE );
} else {
  arduboy.fillRect( 0, baseline, DINO_SHADOW_START, 1, WHITE );
  arduboy.fillRect( (DINO_SHADOW_START + DINO_SHADOW_SIZE), baseline, ((WIDTH - DINO_SHADOW_START) - DINO_SHADOW_SIZE), 1, WHITE );
}
int c_1 = (obs_cactus_1 - distance);
int c_2 = (obs_cactus_2 - distance);
if (c_1 < WIDTH) arduboy.drawBitmap( c_1, obs_cactus_1_y, gfx_cactus + GFX_CACTUS_FRAMESIZE*(0), GFX_CACTUS_WIDTH, GFX_CACTUS_HEIGHT, WHITE );
if (c_2 < WIDTH) arduboy.drawBitmap( c_2, obs_cactus_2_y, gfx_cactus + GFX_CACTUS_FRAMESIZE*(1), GFX_CACTUS_WIDTH, GFX_CACTUS_HEIGHT, WHITE );

}
void draw_dino() {
////// FUNCTION BODY //////
int dy = (baseline_dino - dino_jump_height);
if (!dino_jump_height) {
  arduboy.drawBitmap( 0, dy, gfx_dino + GFX_DINO_FRAMESIZE*(_microcanvas_frame_counter / 10 % 4), GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
} else {
  arduboy.drawBitmap( 0, dy, gfx_dino + GFX_DINO_FRAMESIZE*(0), GFX_DINO_WIDTH, GFX_DINO_HEIGHT, WHITE );
}

}
void draw_u_i() {
////// FUNCTION BODY //////
arduboy.setCursor(0, 0);
              sprintf(_microcanvas_textbuffer, "DIST: %d  SPD: %d", (distance/10), dino_run_speed);
              arduboy.print(_microcanvas_textbuffer);;

}
int check_collisions() {
////// FUNCTION BODY //////
int c_1 = (obs_cactus_1 - distance);
int c_2 = (obs_cactus_2 - distance);
int dy = (baseline_dino - dino_jump_height);
int hit = false;
hit = hit || c_1 <= GFX_DINO_WIDTH && collides( gfx_dino + GFX_DINO_FRAMESIZE*(0), 0, dy, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, gfx_cactus + GFX_CACTUS_FRAMESIZE*(0), c_1, obs_cactus_1_y, GFX_CACTUS_WIDTH, GFX_CACTUS_HEIGHT, false ) || c_2 <= GFX_DINO_WIDTH && collides( gfx_dino + GFX_DINO_FRAMESIZE*(0), 0, dy, GFX_DINO_WIDTH, GFX_DINO_HEIGHT, gfx_cactus + GFX_CACTUS_FRAMESIZE*(1), c_2, obs_cactus_1_y, GFX_CACTUS_WIDTH, GFX_CACTUS_HEIGHT, false );
return hit;

}

void setup() {
  _microcanvas_frame_counter = 0;

  // cpuLoad() will only be 0 right after boot
  if (!arduboy.cpuLoad()) arduboy.begin();

////// CUSTOM SETUP //////
baseline = (HEIGHT - 4);
baseline_dino = (HEIGHT - GFX_DINO_HEIGHT);
_microcanvas_state = S_INTRO;
}

void loop() {
  if (!arduboy.nextFrame()) return;

  ++_microcanvas_frame_counter;
  if (_microcanvas_frame_counter==60000) _microcanvas_frame_counter = 0;

////// LOOP CONTENTS TO FOLLOW //////
arduboy.setFrameRate( round( 60 * (arduboy.pressed( DOWN_BUTTON ) ? 1 / 4 : 1) ) );
if (_microcanvas_state == S_INTRO) {
  if (arduboy.pressed( B_BUTTON )) return game_setup();
  int ended = game_intro();
  if (!ended) return;
  return game_setup();
}
arduboy.clear();
if (arduboy.everyXFrames( 5 )) {
  if (arduboy.pressed( LEFT_BUTTON )) {
  {
arduboy.setCursor( 80, 50 );
arduboy.print( "<" );
};
}
  if (arduboy.pressed( RIGHT_BUTTON )) {
  {
arduboy.setCursor( 93, 50 );
arduboy.print( ">" );
};
}
  if (arduboy.pressed( UP_BUTTON )) {
  {
arduboy.setCursor( 84, 45 );
arduboy.print( "/\\" );
};
}
  if (arduboy.pressed( DOWN_BUTTON )) {
  {
arduboy.setCursor( 84, 55 );
arduboy.print( "\\/" );
};
}
  if (arduboy.pressed( A_BUTTON )) {
  {
arduboy.setCursor( 102, 50 );
arduboy.print( "A" );
};
}
  if (arduboy.pressed( B_BUTTON )) {
  {
arduboy.setCursor( 110, 50 );
arduboy.print( "B" );
};
}
}
if (_microcanvas_state == S_PLAYING) {
  int ended = game_play();
  if (!ended) return;
  _microcanvas_state = S_GAMEOVER;
  return;
}
if (_microcanvas_state == S_GAMEOVER) {
  int ended = game_over();
  if (arduboy.pressed( B_BUTTON )) ended = true;
  if (!ended) return;
  return game_setup();
}
////// END OF LOOP CONTENTS //////

  arduboy.display();
}
