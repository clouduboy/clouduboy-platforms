#include <TinyScreen.h>
#include <SPI.h>
#include <Wire.h>

#include <TinyArcade.h>


////// TARGET-SPECIFIC SETUP: TINY_ARCADE //////
#define screenWidth 96
#define screenHeight 64

// this is the canonical (arduboy lib) usage
#define WIDTH screenWidth
#define HEIGHT screenHeight

#define BLACK 1
#define WHITE 0

#define LEFT_BUTTON 1
#define RIGHT_BUTTON 2
#define A_BUTTON 3
#define B_BUTTON 3

// Currently used color bitdepth (1 - 8 bit, 2 - 16 bit)
#define BIT_DEPTH 2

// 16bit screenbuffer
uint8_t buffer[WIDTH * HEIGHT * BIT_DEPTH];

TinyScreen _display = TinyScreen(TinyScreenPlus);



// frame counter, 2-byte unsigned int, max 65536
unsigned int _microcanvas_frame_counter = 0;

// sprintf() textbuffer for drawText
char _microcanvas_textbuffer[32];

// global state machine
unsigned int _microcanvas_state;

// global current drawing color
unsigned int _microcanvas_fill_color = WHITE;

#define LENGTHOF(x)  (sizeof(x) / sizeof(x[0]))

const uint16_t gfx_invader[] = {
  /*9x8x3@16b*/ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000 };
const uint16_t gfx_invader_2[] = {
  /*9x8@16b*/ 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0xf800, 0x0000, 0xf800, 0xf800, 0x0000, 0xf800, 0x0000, 0xf800, 0xf800, 0x0000, 0xf800, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0xf800, 0x0000, 0x0000, 0x0000, 0xf800, 0x0000, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0x0000, 0x0000, 0x0000, 0xf800, 0x0000, 0x0000 };
const uint16_t gfx_defender[] = {
  /*9x6@16b*/ 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x07e0, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0 };
const uint16_t gfx_rocket[] = {
  /*1x3@16b*/ 0xffff, 0xffff, 0xffff };
const uint16_t gfx_intro[] = {
  /*96x26@16b*/ 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x15db, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x15db, 0x15db, 0x15db, 0x15db, 0x15db, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 };


const byte GFX_INVADER_WIDTH = 9;
const byte GFX_INVADER_HEIGHT = 8;
const byte GFX_INVADER_FRAMES = 3;
const byte GFX_INVADER_FRAMESIZE = 72;
const int GFX_INVADER_MASKCOLOR = 0x0000;
const byte GFX_INVADER_2_WIDTH = 9;
const byte GFX_INVADER_2_HEIGHT = 8;
const byte GFX_INVADER_2_FRAMES = 0;
const byte GFX_INVADER_2_FRAMESIZE = 72;
const int GFX_INVADER_2_MASKCOLOR = 0x0000;
const byte GFX_DEFENDER_WIDTH = 9;
const byte GFX_DEFENDER_HEIGHT = 6;
const byte GFX_DEFENDER_FRAMES = 0;
const byte GFX_DEFENDER_FRAMESIZE = 54;
const int GFX_DEFENDER_MASKCOLOR = 0x0000;
const byte GFX_ROCKET_WIDTH = 1;
const byte GFX_ROCKET_HEIGHT = 3;
const byte GFX_ROCKET_FRAMES = 0;
const byte GFX_ROCKET_FRAMESIZE = 3;
const int GFX_ROCKET_MASKCOLOR = 0x0000;
const byte GFX_INTRO_WIDTH = 96;
const byte GFX_INTRO_HEIGHT = 26;
const byte GFX_INTRO_FRAMES = 0;
const int GFX_INTRO_FRAMESIZE = 2496;
const int GFX_INTRO_MASKCOLOR = 0x0000;
const int COUNTDOWN_TIMER = 13;
const int INVADER_WAVES = 4;
const int INVADER_ALIENS = 8;
const int DEFENDER_WIN_ANIMATION_DURATION = 60;
const int GAME_TIMER_ANIMATION_DURATION = 60 * 1 + 60 * COUNTDOWN_TIMER;

int invaders[ INVADER_WAVES * INVADER_ALIENS ];
int total_invaders;
int invader_distance;
int turret_x;
int rocket_x;
int rocket_y;
int game_over;
int intro = true;
int intro_after = 0;
int defeat_after = 0;
int victory_after = 0;
int defender_win_animation_start = 0;
int game_timer_animation_start = 0;

// t: current time, b: beginning value, c: change in value, d: duration
int ease_cubic_in(int x, int t, int b, int c, int d) {
  float td= (float)t/(float)d;
  return (int)(c * td*td*td + b +.5);
}

boolean collides(
  const uint16_t* s1, int x1,int y1, int s1_width, int s1_height,
  const uint16_t* s2, int x2,int y2, int s2_width, int s2_height,
  boolean precise
) {
  boolean result = false;

  // Basic collision rectangle
  int cx = x1>x2 ? x1 : x2;
  int cw = x1>x2 ? x2+s2_width-x1 : x1+s1_width-x2;

  int cy = y1>y2 ? y1 : y2;
  int ch = y1>y2 ? y2+s2_height-y1 : y1+s1_height-y2;

  if (cw>0 && ch>0) {
    result = true;
  }

  // No bounding rect collision or no precise check requested
  if (!precise || !result) {
    return result;
  }

  // TODO: pixel-by-pixel collision test

  return result;
}

void defeat() {
////// FUNCTION BODY //////
tiny_arcade_drawBitmap( WIDTH / 2 - GFX_INVADER_WIDTH / 2, HEIGHT / 2 - GFX_INVADER_HEIGHT * 2, gfx_invader + GFX_INVADER_FRAMESIZE*(_microcanvas_frame_counter / 15 & 1), GFX_INVADER_WIDTH, GFX_INVADER_HEIGHT, WHITE );
_microcanvas_fill_color = WHITE;
{
tiny_arcade_setTextSize( 1 );
tiny_arcade_setCursor( WIDTH / 2 - strlen(" OH NO!") * 6 / 2, HEIGHT / 2 );
tiny_arcade_print( " OH NO!" );
};
if (defeat_after == 0) defeat_after = _microcanvas_frame_counter;
if (defeat_after > 0 && (_microcanvas_frame_counter - defeat_after) > 3 * 60) {
  _microcanvas_fill_color = WHITE;
  {
tiny_arcade_setTextSize( 1 );
tiny_arcade_setCursor( WIDTH / 2 - strlen("press [B] to retry") * 6 / 2, HEIGHT / 4 * 3 );
tiny_arcade_print( "press [B] to retry" );
};
  if (tiny_arcade_pressed( B_BUTTON )) {
  defeat_after = 0;
  setup();
}
}

}
void victory() {
////// FUNCTION BODY //////
if (!defender_win_animation_start) defender_win_animation_start = _microcanvas_frame_counter;
if (defender_win_animation_remaining() > 0) {
  int turret_y = defender_win_animation();
  tiny_arcade_drawBitmap( turret_x - 5, turret_y, gfx_defender, GFX_DEFENDER_WIDTH, GFX_DEFENDER_HEIGHT, WHITE );
}
_microcanvas_fill_color = WHITE;
{
tiny_arcade_setTextSize( 1 );
tiny_arcade_setCursor( WIDTH / 2 - strlen(" HUMANITY PREVAILS!") * 6 / 2, HEIGHT / 2 );
tiny_arcade_print( " HUMANITY PREVAILS!" );
};
tiny_arcade_drawBitmap( WIDTH / 2 + 40, HEIGHT / 2 - 6, gfx_invader + GFX_INVADER_FRAMESIZE*(2), GFX_INVADER_WIDTH, GFX_INVADER_HEIGHT, WHITE );
if (victory_after == 0) victory_after = _microcanvas_frame_counter;
if (victory_after > 0 && (_microcanvas_frame_counter - victory_after) > 2 * 60) {
  int fall = (((_microcanvas_frame_counter - victory_after) - 2 * 60) * 2 + HEIGHT / 2) + 5;
  if (fall < HEIGHT) {
  tiny_arcade_drawBitmap( WIDTH / 2 - 55, fall, gfx_invader + GFX_INVADER_FRAMESIZE*(2), GFX_INVADER_WIDTH, GFX_INVADER_HEIGHT, WHITE );
} else {
  _microcanvas_fill_color = WHITE;
  {
tiny_arcade_setTextSize( 1 );
tiny_arcade_setCursor( WIDTH / 2 - strlen("[B] to play again") * 6 / 2, HEIGHT / 4 * 3 );
tiny_arcade_print( "[B] to play again" );
};
  if (tiny_arcade_pressed( B_BUTTON )) {
  victory_after = 0;
  setup();
}
}
} else {
  tiny_arcade_drawBitmap( WIDTH / 2 - 55, HEIGHT / 2 + 5, gfx_invader + GFX_INVADER_FRAMESIZE*(2), GFX_INVADER_WIDTH, GFX_INVADER_HEIGHT, WHITE );
}

}
int playgame() {
////// FUNCTION BODY //////
tiny_arcade_clear();
int invasion = game_timer_animation();
int invader_x = invader_animation();
int start_x = (WIDTH - (INVADER_ALIENS * (GFX_INVADER_WIDTH + invader_distance) - invader_distance)) / 2;
int y = 0;
while (y < INVADER_WAVES) {
  int x = 0;
  while (x < INVADER_ALIENS) {
  if (invaders[ x + INVADER_ALIENS * y ]) {
  int d_y = invasion + y * (GFX_INVADER_HEIGHT + 1);
  if ((d_y + GFX_INVADER_HEIGHT) >= (HEIGHT - GFX_DEFENDER_HEIGHT)) {
  game_over = true;
  return false;
}
  if (y % 2) {
  tiny_arcade_drawBitmap( (start_x + (invader_x - 3)) + x * (GFX_INVADER_WIDTH + invader_distance), d_y, gfx_invader + GFX_INVADER_FRAMESIZE*((invader_x >> 1) & 1), GFX_INVADER_WIDTH, GFX_INVADER_HEIGHT, WHITE );
  if (rocket_y >= 3 && collides( gfx_invader + GFX_INVADER_FRAMESIZE*((invader_x >> 1) & 1), (start_x + (invader_x - 3)) + x * (GFX_INVADER_WIDTH + invader_distance), d_y, GFX_INVADER_WIDTH, GFX_INVADER_HEIGHT, gfx_rocket, rocket_x, rocket_y, GFX_ROCKET_WIDTH, GFX_ROCKET_HEIGHT, "false" )) {
  invaders[ x + INVADER_ALIENS * y ] = 0;
  total_invaders--;
  rocket_y = 0;
}
} else {
  tiny_arcade_drawBitmap( (start_x - (invader_x - 3)) + x * (GFX_INVADER_WIDTH + invader_distance), d_y, gfx_invader_2, GFX_INVADER_2_WIDTH, GFX_INVADER_2_HEIGHT, WHITE );
  if (rocket_y >= 3 && collides( gfx_invader_2, (start_x - (invader_x - 3)) + x * (GFX_INVADER_WIDTH + invader_distance), d_y, GFX_INVADER_2_WIDTH, GFX_INVADER_2_HEIGHT, gfx_rocket, rocket_x, rocket_y, GFX_ROCKET_WIDTH, GFX_ROCKET_HEIGHT, "false" )) {
  invaders[ x + 8 * y ] = 0;
  total_invaders--;
  rocket_y = 0;
}
}
}
  x = x + 1;
}
  y = y + 1;
}
tiny_arcade_drawBitmap( turret_x - GFX_DEFENDER_WIDTH / 2, HEIGHT - GFX_DEFENDER_HEIGHT, gfx_defender, GFX_DEFENDER_WIDTH, GFX_DEFENDER_HEIGHT, WHITE );
if (rocket_y >= 3) {
  tiny_arcade_drawBitmap( rocket_x, rocket_y, gfx_rocket, GFX_ROCKET_WIDTH, GFX_ROCKET_HEIGHT, WHITE );
}
tiny_arcade_fillRect( WIDTH / 2 - 7, 0, 13, 8, BLACK );
_microcanvas_fill_color = WHITE;
{
tiny_arcade_setTextSize( 1 );
tiny_arcade_setCursor( WIDTH / 2 - strlen(_microcanvas_textbuffer) * 6 / 2, 0 );
sprintf( _microcanvas_textbuffer, "%u", (int)floor( game_timer_animation_remaining() / 60 ) );
tiny_arcade_print( _microcanvas_textbuffer );
};

}
int invader_animation() {
////// FUNCTION BODY //////
int t = _microcanvas_frame_counter % 120;
int x;
if (t < 60) {
  x = (0 + ((6 - 0) * (t - 0) * 10 / 60 + 5) / 10) | 0;
} else if (t < 120) {
  x = (6 + ((0 - 6) * (t - 60) * 10 / 60 + 5) / 10) | 0;
}
return x;

}
int defender_win_animation() {
////// FUNCTION BODY //////
int t = min( _microcanvas_frame_counter - defender_win_animation_start, DEFENDER_WIN_ANIMATION_DURATION );
int x = (ease_cubic_in( 0, t, 10 * (HEIGHT - GFX_DEFENDER_HEIGHT), -10 * (HEIGHT - GFX_DEFENDER_HEIGHT), DEFENDER_WIN_ANIMATION_DURATION ) + 5) / 10 | 0;
return x;

}
int defender_win_animation_remaining() {
////// FUNCTION BODY //////
return max( 60 - (_microcanvas_frame_counter - defender_win_animation_start), 0 );

}
int game_timer_animation() {
////// FUNCTION BODY //////
int t = min( _microcanvas_frame_counter - game_timer_animation_start, GAME_TIMER_ANIMATION_DURATION );
int duration_1 = 60 * 1; int duration_2 = 60 * COUNTDOWN_TIMER;
int x;
if (t < duration_1) {
  x = (ease_cubic_in( 0, t, 10 * 0, 10 * 0, duration_1 ) + 5) / 10 | 0;
} else if (t <= (duration_1 + duration_2)) {
  x = (ease_cubic_in( 0, t - duration_1, 10 * 0, 10 * (((HEIGHT - GFX_DEFENDER_HEIGHT) - GFX_INVADER_HEIGHT) + 3), duration_2 ) + 5) / 10 | 0;
}
return x;

}
int game_timer_animation_remaining() {
////// FUNCTION BODY //////
return max( GAME_TIMER_ANIMATION_DURATION - (_microcanvas_frame_counter - game_timer_animation_start), 0 );

}

////////////// TINY ARCADE LIB, BASED ON ARDUBOY //////////////////
uint8_t frameRate;
uint16_t frameCount;
uint8_t eachFrameMillis;
long lastFrameStart;
long nextFrameStart;
bool post_render;
uint8_t lastFrameDurationMs;

// Background color
uint16_t _microcanvas_bgcolor = 0x0000;


// Font support
const uint8_t _microcanvas_font_w = 5, _microcanvas_font_h = 7;
int _microcanvas_print_x = 0, _microcanvas_print_y = 0;

// standard ascii 5x7 font
const static unsigned char _microcanvas_font[] PROGMEM =
{
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
    0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
    0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
    0x18, 0x3C, 0x7E, 0x3C, 0x18,
    0x1C, 0x57, 0x7D, 0x57, 0x1C,
    0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
    0x00, 0x18, 0x3C, 0x18, 0x00,
    0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
    0x00, 0x18, 0x24, 0x18, 0x00,
    0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
    0x30, 0x48, 0x3A, 0x06, 0x0E,
    0x26, 0x29, 0x79, 0x29, 0x26,
    0x40, 0x7F, 0x05, 0x05, 0x07,
    0x40, 0x7F, 0x05, 0x25, 0x3F,
    0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
    0x7F, 0x3E, 0x1C, 0x1C, 0x08,
    0x08, 0x1C, 0x1C, 0x3E, 0x7F,
    0x14, 0x22, 0x7F, 0x22, 0x14,
    0x5F, 0x5F, 0x00, 0x5F, 0x5F,
    0x06, 0x09, 0x7F, 0x01, 0x7F,
    0x00, 0x66, 0x89, 0x95, 0x6A,
    0x60, 0x60, 0x60, 0x60, 0x60,
    0x94, 0xA2, 0xFF, 0xA2, 0x94,
    0x08, 0x04, 0x7E, 0x04, 0x08,
    0x10, 0x20, 0x7E, 0x20, 0x10,
    0x08, 0x08, 0x2A, 0x1C, 0x08,
    0x08, 0x1C, 0x2A, 0x08, 0x08,
    0x1E, 0x10, 0x10, 0x10, 0x10,
    0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
    0x30, 0x38, 0x3E, 0x38, 0x30,
    0x06, 0x0E, 0x3E, 0x0E, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x5F, 0x00, 0x00,
    0x00, 0x07, 0x00, 0x07, 0x00,
    0x14, 0x7F, 0x14, 0x7F, 0x14,
    0x24, 0x2A, 0x7F, 0x2A, 0x12,
    0x23, 0x13, 0x08, 0x64, 0x62,
    0x36, 0x49, 0x56, 0x20, 0x50,
    0x00, 0x08, 0x07, 0x03, 0x00,
    0x00, 0x1C, 0x22, 0x41, 0x00,
    0x00, 0x41, 0x22, 0x1C, 0x00,
    0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
    0x08, 0x08, 0x3E, 0x08, 0x08,
    0x00, 0x80, 0x70, 0x30, 0x00,
    0x08, 0x08, 0x08, 0x08, 0x08,
    0x00, 0x00, 0x60, 0x60, 0x00,
    0x20, 0x10, 0x08, 0x04, 0x02,
    0x3E, 0x51, 0x49, 0x45, 0x3E,
    0x00, 0x42, 0x7F, 0x40, 0x00,
    0x72, 0x49, 0x49, 0x49, 0x46,
    0x21, 0x41, 0x49, 0x4D, 0x33,
    0x18, 0x14, 0x12, 0x7F, 0x10,
    0x27, 0x45, 0x45, 0x45, 0x39,
    0x3C, 0x4A, 0x49, 0x49, 0x31,
    0x41, 0x21, 0x11, 0x09, 0x07,
    0x36, 0x49, 0x49, 0x49, 0x36,
    0x46, 0x49, 0x49, 0x29, 0x1E,
    0x00, 0x00, 0x14, 0x00, 0x00,
    0x00, 0x40, 0x34, 0x00, 0x00,
    0x00, 0x08, 0x14, 0x22, 0x41,
    0x14, 0x14, 0x14, 0x14, 0x14,
    0x00, 0x41, 0x22, 0x14, 0x08,
    0x02, 0x01, 0x59, 0x09, 0x06,
    0x3E, 0x41, 0x5D, 0x59, 0x4E,
    0x7C, 0x12, 0x11, 0x12, 0x7C,
    0x7F, 0x49, 0x49, 0x49, 0x36,
    0x3E, 0x41, 0x41, 0x41, 0x22,
    0x7F, 0x41, 0x41, 0x41, 0x3E,
    0x7F, 0x49, 0x49, 0x49, 0x41,
    0x7F, 0x09, 0x09, 0x09, 0x01,
    0x3E, 0x41, 0x41, 0x51, 0x73,
    0x7F, 0x08, 0x08, 0x08, 0x7F,
    0x00, 0x41, 0x7F, 0x41, 0x00,
    0x20, 0x40, 0x41, 0x3F, 0x01,
    0x7F, 0x08, 0x14, 0x22, 0x41,
    0x7F, 0x40, 0x40, 0x40, 0x40,
    0x7F, 0x02, 0x1C, 0x02, 0x7F,
    0x7F, 0x04, 0x08, 0x10, 0x7F,
    0x3E, 0x41, 0x41, 0x41, 0x3E,
    0x7F, 0x09, 0x09, 0x09, 0x06,
    0x3E, 0x41, 0x51, 0x21, 0x5E,
    0x7F, 0x09, 0x19, 0x29, 0x46,
    0x26, 0x49, 0x49, 0x49, 0x32,
    0x03, 0x01, 0x7F, 0x01, 0x03,
    0x3F, 0x40, 0x40, 0x40, 0x3F,
    0x1F, 0x20, 0x40, 0x20, 0x1F,
    0x3F, 0x40, 0x38, 0x40, 0x3F,
    0x63, 0x14, 0x08, 0x14, 0x63,
    0x03, 0x04, 0x78, 0x04, 0x03,
    0x61, 0x59, 0x49, 0x4D, 0x43,
    0x00, 0x7F, 0x41, 0x41, 0x41,
    0x02, 0x04, 0x08, 0x10, 0x20,
    0x00, 0x41, 0x41, 0x41, 0x7F,
    0x04, 0x02, 0x01, 0x02, 0x04,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x03, 0x07, 0x08, 0x00,
    0x20, 0x54, 0x54, 0x78, 0x40,
    0x7F, 0x28, 0x44, 0x44, 0x38,
    0x38, 0x44, 0x44, 0x44, 0x28,
    0x38, 0x44, 0x44, 0x28, 0x7F,
    0x38, 0x54, 0x54, 0x54, 0x18,
    0x00, 0x08, 0x7E, 0x09, 0x02,
    0x18, 0xA4, 0xA4, 0x9C, 0x78,
    0x7F, 0x08, 0x04, 0x04, 0x78,
    0x00, 0x44, 0x7D, 0x40, 0x00,
    0x20, 0x40, 0x40, 0x3D, 0x00,
    0x7F, 0x10, 0x28, 0x44, 0x00,
    0x00, 0x41, 0x7F, 0x40, 0x00,
    0x7C, 0x04, 0x78, 0x04, 0x78,
    0x7C, 0x08, 0x04, 0x04, 0x78,
    0x38, 0x44, 0x44, 0x44, 0x38,
    0xFC, 0x18, 0x24, 0x24, 0x18,
    0x18, 0x24, 0x24, 0x18, 0xFC,
    0x7C, 0x08, 0x04, 0x04, 0x08,
    0x48, 0x54, 0x54, 0x54, 0x24,
    0x04, 0x04, 0x3F, 0x44, 0x24,
    0x3C, 0x40, 0x40, 0x20, 0x7C,
    0x1C, 0x20, 0x40, 0x20, 0x1C,
    0x3C, 0x40, 0x30, 0x40, 0x3C,
    0x44, 0x28, 0x10, 0x28, 0x44,
    0x4C, 0x90, 0x90, 0x90, 0x7C,
    0x44, 0x64, 0x54, 0x4C, 0x44,
    0x00, 0x08, 0x36, 0x41, 0x00,
    0x00, 0x00, 0x77, 0x00, 0x00,
    0x00, 0x41, 0x36, 0x08, 0x00,
    0x02, 0x01, 0x02, 0x04, 0x02,
    0x3C, 0x26, 0x23, 0x26, 0x3C,
    0x1E, 0xA1, 0xA1, 0x61, 0x12,
    0x3A, 0x40, 0x40, 0x20, 0x7A,
    0x38, 0x54, 0x54, 0x55, 0x59,
    0x21, 0x55, 0x55, 0x79, 0x41,
    0x21, 0x54, 0x54, 0x78, 0x41,
    0x21, 0x55, 0x54, 0x78, 0x40,
    0x20, 0x54, 0x55, 0x79, 0x40,
    0x0C, 0x1E, 0x52, 0x72, 0x12,
    0x39, 0x55, 0x55, 0x55, 0x59,
    0x39, 0x54, 0x54, 0x54, 0x59,
    0x39, 0x55, 0x54, 0x54, 0x58,
    0x00, 0x00, 0x45, 0x7C, 0x41,
    0x00, 0x02, 0x45, 0x7D, 0x42,
    0x00, 0x01, 0x45, 0x7C, 0x40,
    0xF0, 0x29, 0x24, 0x29, 0xF0,
    0xF0, 0x28, 0x25, 0x28, 0xF0,
    0x7C, 0x54, 0x55, 0x45, 0x00,
    0x20, 0x54, 0x54, 0x7C, 0x54,
    0x7C, 0x0A, 0x09, 0x7F, 0x49,
    0x32, 0x49, 0x49, 0x49, 0x32,
    0x32, 0x48, 0x48, 0x48, 0x32,
    0x32, 0x4A, 0x48, 0x48, 0x30,
    0x3A, 0x41, 0x41, 0x21, 0x7A,
    0x3A, 0x42, 0x40, 0x20, 0x78,
    0x00, 0x9D, 0xA0, 0xA0, 0x7D,
    0x39, 0x44, 0x44, 0x44, 0x39,
    0x3D, 0x40, 0x40, 0x40, 0x3D,
    0x3C, 0x24, 0xFF, 0x24, 0x24,
    0x48, 0x7E, 0x49, 0x43, 0x66,
    0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
    0xFF, 0x09, 0x29, 0xF6, 0x20,
    0xC0, 0x88, 0x7E, 0x09, 0x03,
    0x20, 0x54, 0x54, 0x79, 0x41,
    0x00, 0x00, 0x44, 0x7D, 0x41,
    0x30, 0x48, 0x48, 0x4A, 0x32,
    0x38, 0x40, 0x40, 0x22, 0x7A,
    0x00, 0x7A, 0x0A, 0x0A, 0x72,
    0x7D, 0x0D, 0x19, 0x31, 0x7D,
    0x26, 0x29, 0x29, 0x2F, 0x28,
    0x26, 0x29, 0x29, 0x29, 0x26,
    0x30, 0x48, 0x4D, 0x40, 0x20,
    0x38, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x38,
    0x2F, 0x10, 0xC8, 0xAC, 0xBA,
    0x2F, 0x10, 0x28, 0x34, 0xFA,
    0x00, 0x00, 0x7B, 0x00, 0x00,
    0x08, 0x14, 0x2A, 0x14, 0x22,
    0x22, 0x14, 0x2A, 0x14, 0x08,
    0x95, 0x00, 0x22, 0x00, 0x95,
    0xAA, 0x00, 0x55, 0x00, 0xAA,
    0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0x00, 0x00, 0x00, 0xFF, 0x00,
    0x10, 0x10, 0x10, 0xFF, 0x00,
    0x14, 0x14, 0x14, 0xFF, 0x00,
    0x10, 0x10, 0xFF, 0x00, 0xFF,
    0x10, 0x10, 0xF0, 0x10, 0xF0,
    0x14, 0x14, 0x14, 0xFC, 0x00,
    0x14, 0x14, 0xF7, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0xFF,
    0x14, 0x14, 0xF4, 0x04, 0xFC,
    0x14, 0x14, 0x17, 0x10, 0x1F,
    0x10, 0x10, 0x1F, 0x10, 0x1F,
    0x14, 0x14, 0x14, 0x1F, 0x00,
    0x10, 0x10, 0x10, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x1F, 0x10,
    0x10, 0x10, 0x10, 0x1F, 0x10,
    0x10, 0x10, 0x10, 0xF0, 0x10,
    0x00, 0x00, 0x00, 0xFF, 0x10,
    0x10, 0x10, 0x10, 0x10, 0x10,
    0x10, 0x10, 0x10, 0xFF, 0x10,
    0x00, 0x00, 0x00, 0xFF, 0x14,
    0x00, 0x00, 0xFF, 0x00, 0xFF,
    0x00, 0x00, 0x1F, 0x10, 0x17,
    0x00, 0x00, 0xFC, 0x04, 0xF4,
    0x14, 0x14, 0x17, 0x10, 0x17,
    0x14, 0x14, 0xF4, 0x04, 0xF4,
    0x00, 0x00, 0xFF, 0x00, 0xF7,
    0x14, 0x14, 0x14, 0x14, 0x14,
    0x14, 0x14, 0xF7, 0x00, 0xF7,
    0x14, 0x14, 0x14, 0x17, 0x14,
    0x10, 0x10, 0x1F, 0x10, 0x1F,
    0x14, 0x14, 0x14, 0xF4, 0x14,
    0x10, 0x10, 0xF0, 0x10, 0xF0,
    0x00, 0x00, 0x1F, 0x10, 0x1F,
    0x00, 0x00, 0x00, 0x1F, 0x14,
    0x00, 0x00, 0x00, 0xFC, 0x14,
    0x00, 0x00, 0xF0, 0x10, 0xF0,
    0x10, 0x10, 0xFF, 0x10, 0xFF,
    0x14, 0x14, 0x14, 0xFF, 0x14,
    0x10, 0x10, 0x10, 0x1F, 0x00,
    0x00, 0x00, 0x00, 0xF0, 0x10,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xFF,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x38, 0x44, 0x44, 0x38, 0x44,
    0x7C, 0x2A, 0x2A, 0x3E, 0x14,
    0x7E, 0x02, 0x02, 0x06, 0x06,
    0x02, 0x7E, 0x02, 0x7E, 0x02,
    0x63, 0x55, 0x49, 0x41, 0x63,
    0x38, 0x44, 0x44, 0x3C, 0x04,
    0x40, 0x7E, 0x20, 0x1E, 0x20,
    0x06, 0x02, 0x7E, 0x02, 0x02,
    0x99, 0xA5, 0xE7, 0xA5, 0x99,
    0x1C, 0x2A, 0x49, 0x2A, 0x1C,
    0x4C, 0x72, 0x01, 0x72, 0x4C,
    0x30, 0x4A, 0x4D, 0x4D, 0x30,
    0x30, 0x48, 0x78, 0x48, 0x30,
    0xBC, 0x62, 0x5A, 0x46, 0x3D,
    0x3E, 0x49, 0x49, 0x49, 0x00,
    0x7E, 0x01, 0x01, 0x01, 0x7E,
    0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
    0x44, 0x44, 0x5F, 0x44, 0x44,
    0x40, 0x51, 0x4A, 0x44, 0x40,
    0x40, 0x44, 0x4A, 0x51, 0x40,
    0x00, 0x00, 0xFF, 0x01, 0x03,
    0xE0, 0x80, 0xFF, 0x00, 0x00,
    0x08, 0x08, 0x6B, 0x6B, 0x08,
    0x36, 0x12, 0x36, 0x24, 0x36,
    0x06, 0x0F, 0x09, 0x0F, 0x06,
    0x00, 0x00, 0x18, 0x18, 0x00,
    0x00, 0x00, 0x10, 0x10, 0x00,
    0x30, 0x40, 0xFF, 0x01, 0x01,
    0x00, 0x1F, 0x01, 0x01, 0x1E,
    0x00, 0x19, 0x1D, 0x17, 0x12,
    0x00, 0x3C, 0x3C, 0x3C, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00,
};


/* Graphics */
void tiny_arcade_clear() {
  tiny_arcade_fillScreen(_microcanvas_bgcolor);
}

void tiny_arcade_fillScreen(uint16_t color) {
  for (int i = 0; i < WIDTH*HEIGHT*BIT_DEPTH; i+=BIT_DEPTH) {
    if (BIT_DEPTH>1) buffer[i] = color >> 8 & 0xff;
    buffer[i+1] = color & 0xff;
  }
}

void tiny_arcade_display() {
  // debug
  tiny_arcade_debug_int(frameCount);

  // write double-buffer contents
  _display.goTo(0, 0);
  _display.startData();
  _display.writeBuffer(buffer, WIDTH * HEIGHT * 2);
  _display.endTransfer();
}

//void tiny_arcade_drawBitmap(int16_t x, int16_t y, const uint8_t *gfx, uint8_t w, uint8_t h, uint8_t blending) {
void tiny_arcade_drawBitmap(int16_t dx, int16_t dy, const uint16_t *gfx, uint8_t w, uint8_t h, uint8_t blending) {
  for (int y = dy; y < min(HEIGHT, dy+h); y++) {
    for (int x = dx; x < min(WIDTH, dx+w); x++) {
      uint16_t color = *gfx++;

      if (x<0 || y<0) continue;

      // Color mode 0 (default)
      // Paint only opaque pixels, skip transparent pixels
      // TODO: transparency handling
      if (blending == WHITE) {
        buffer[(x + y*WIDTH) * BIT_DEPTH] = color >> 8;
        if (BIT_DEPTH == 2) buffer[(x + y*WIDTH) * BIT_DEPTH + 1] = color;
      }
    }
  }
}


/* Frame management */
void tiny_arcade_setFrameRate(uint8_t rate)
{
  frameRate = rate;
  eachFrameMillis = 1000/rate;
}

bool tiny_arcade_everyXFrames(uint8_t frames)
{
  return frameCount % frames == 0;
}

void tiny_arcade_init() {
    // frame management
    tiny_arcade_setFrameRate(60);
    frameCount = 0;
    nextFrameStart = 0;
}

bool tiny_arcade_nextFrame()
{
  long now = millis();
  uint8_t remaining;

  // post render
  if (post_render) {
    lastFrameDurationMs = now - lastFrameStart;
    frameCount++;
    post_render = false;
  }

  // if it's not time for the next frame yet
  if (now < nextFrameStart) {
    remaining = nextFrameStart - now;
    // if we have more than 1ms to spare, lets sleep
    // we should be woken up by timer0 every 1ms, so this should be ok
    if (remaining > 1)
      ///*TODO:where is this from?*/idle();
    ///idle is from Arduboy core.cpp
    ///https://forum.arduino.cc/index.php?topic=337289.msg2325280#msg2325280
    ///
    {
      delay(1);
    }
    return false;
  }

  // pre-render

  // technically next frame should be last frame + each frame but if we're
  // running a slow render we would constnatly be behind the clock
  // keep an eye on this and see how it works.  If it works well the
  // lastFrameStart variable could be eliminated completely
  nextFrameStart = now + eachFrameMillis;
  lastFrameStart = now;
  post_render = true;
  return post_render;
}

bool tiny_arcade_pressed(int btn) {
  switch (btn) {
    case A_BUTTON:
      return checkButton(TAButton1);
    case LEFT_BUTTON:
      return checkJoystick(TAJoystickLeft);
    case RIGHT_BUTTON:
      return checkJoystick(TAJoystickRight);
  }
  return false;
}


void tiny_arcade_setCursor( int x, int y ) {
  _microcanvas_print_x = x;
  _microcanvas_print_y = y;
}
void tiny_arcade_print(const char* string) {
  while (*string > 0 && _microcanvas_print_x < WIDTH-_microcanvas_font_w) {
    tiny_arcade_drawCharacter(_microcanvas_print_x, _microcanvas_print_y, *string, 0xffff, WHITE);
    ++string;
    _microcanvas_print_x+=_microcanvas_font_w+1;
  }
}

//void tiny_arcade_drawBitmap(int16_t x, int16_t y, const uint8_t *gfx, uint8_t w, uint8_t h, uint8_t blending) {
void tiny_arcade_drawCharacter(uint8_t dx, uint8_t dy, char c, int16_t color, uint8_t blending) {
  for (int y = dy; y < min(HEIGHT, dy+_microcanvas_font_h); y++) {
    for (int x = dx; x < min(WIDTH, dx+_microcanvas_font_w); x++) {
      char b = _microcanvas_font[c*5+x-dx];

      if (x<0 || y<0) continue;

      // draw only if appropriate bit is set
      if (b >> (y-dy) & 1) {
        if (blending == WHITE) {
          buffer[(x + y*WIDTH) * BIT_DEPTH] = color >> 8;
          if (BIT_DEPTH == 2) buffer[(x + y*WIDTH) * BIT_DEPTH + 1] = color;
        }
      }
    }
  }
}

void tiny_arcade_fillRect(int dx, int dy, int w, int h, int color) {
  for (int y = dy; y < min(HEIGHT, dy+h); y++) {
    for (int x = dx; x < min(WIDTH, dx+w); x++) {
      if (x<0 || y<0) continue;

      buffer[(x + y*WIDTH) * BIT_DEPTH] = color >> 8;
      if (BIT_DEPTH == 2) buffer[(x + y*WIDTH) * BIT_DEPTH + 1] = color;
    }
  }
}





/// DUMMY / UNIMPLEMENTED

void tiny_arcade_setTextSize(int size) {}



// DEBUG
const uint16_t gfx_numbers[] = {
  /*5x5x12@16b*/ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
void tiny_arcade_debug_int(int var) {
  int pos = 1;
  while (pos < 16 && var > 0) {
    tiny_arcade_drawBitmap(WIDTH-pos*5,0, gfx_numbers+25*(var%10), 5,5,WHITE);
    var /= 10;
    ++pos;
  }
}
void setup() {
  _microcanvas_frame_counter = 0;

  // TODO: reset compatibility
  // cpuLoad() will only be 0 right after boot
  arcadeInit();
  Wire.begin();

  _display.begin();
  _display.setFlip(0);
  _display.setBrightness(8);
  _display.setBitDepth(1);
  //_display.setColorMode(TSColorModeBGR);

////// CUSTOM SETUP //////
turret_x = WIDTH / 2;
rocket_x = 0;
rocket_y = 0;
for (unsigned int _a_fill_idx_ = 0; _a_fill_idx_ < LENGTHOF( invaders ); ++_a_fill_idx_) invaders[_a_fill_idx_] = 1;
total_invaders = LENGTHOF( invaders );
invader_distance = (int)floor( (WIDTH - INVADER_ALIENS * GFX_INVADER_WIDTH) / INVADER_ALIENS );
if (invader_distance > 4) invader_distance = 4;
game_over = false;
defender_win_animation_start = 0;
game_timer_animation_start = 0;;
}
void loop() {
  if (!tiny_arcade_nextFrame()) return;

  ++_microcanvas_frame_counter;
  if (_microcanvas_frame_counter==60000) _microcanvas_frame_counter = 0;

  ////// LOOP CONTENTS TO FOLLOW //////

////// LOOP CONTENTS TO FOLLOW //////
tiny_arcade_clear();
if (intro_after == 0) intro_after = _microcanvas_frame_counter;
if (intro) {
  if ((_microcanvas_frame_counter - intro_after) < 3 * 60) {
  tiny_arcade_drawBitmap( WIDTH / 2 - GFX_INTRO_WIDTH / 2, HEIGHT / 2 - GFX_INTRO_HEIGHT / 2, gfx_intro, GFX_INTRO_WIDTH, GFX_INTRO_HEIGHT, WHITE );
} else {
  intro = false;
  game_timer_animation_start = _microcanvas_frame_counter;
}
  tiny_arcade_display(); return;
}
if (rocket_y < 3) {
  if (total_invaders > 0 && tiny_arcade_pressed( A_BUTTON )) {
  rocket_y = HEIGHT - 3;
  rocket_x = turret_x;
}
}
if (rocket_y >= 3) {
  rocket_y = rocket_y - 3;
}
if (total_invaders > 0 && !game_over) {
  if (tiny_arcade_pressed( LEFT_BUTTON )) {
  turret_x = turret_x - 3;
}
  if (tiny_arcade_pressed( RIGHT_BUTTON )) {
  turret_x = turret_x + 3;
}
  if (turret_x < GFX_DEFENDER_WIDTH / 2) {
  turret_x = GFX_DEFENDER_WIDTH / 2;
}
  if (turret_x >= (WIDTH - GFX_DEFENDER_WIDTH / 2)) {
  turret_x = (WIDTH - GFX_DEFENDER_WIDTH / 2) - 1;
}
  playgame();
} else {
  if (game_over) {
  defeat();
} else {
  victory();
}
};
////// END OF LOOP CONTENTS //////

  tiny_arcade_display();
}
